{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"bootstrap-python-package","text":"<p>This template repository provides the boilerplate to create a python package. It is configured with all the following features:</p> <ul> <li>Test suite using tox and pytest</li> <li>Typing using mypy</li> <li>Linting, security and code format using ruff (using black   code style and bandit security rules)</li> <li>Integration with CodeClimate for code quality and coverage checks</li> <li>CI pipeline supporting:<ul> <li>testing against multiple python versions</li> <li>releases on PyPI</li> <li>GitHub pages documentation using mkdocs</li> </ul> </li> <li>PyCharm profile basic configuration</li> </ul>"},{"location":"#how-to-use-this-repository-template-to-create-a-new-package","title":"How to use this repository template to create a new package","text":"<ul> <li>Create your github repository using this template. (The big green <code>Use this template</code> button)</li> <li>Rename the <code>bootstrap_python_package</code> directory</li> <li>Search and replace all the occurrences of <code>bootstrap-python-package</code> and <code>bootstrap_python_package</code></li> <li>Configure a pending trusted publisher on pypi using the following values:<ul> <li>PyPI Project Name: The github repository name (in this case <code>bootstrap-python-package</code>)</li> <li>Owner: The github repository owner (in this case <code>febus982</code>)</li> <li>Repository name: The github repository name (in this case <code>bootstrap-python-package</code>)</li> <li>Workflow name: <code>release.yml</code></li> </ul> </li> <li>Create a GitHub Actions secret named <code>CODECLIMATE_REPORTER_ID</code> (at URL <code>https://github.com/GITHUB_NAME_OR_ORGANIZATION/GITHUB_REPOSITORY/settings/secrets/actions</code>)   containing the codeclimate reporter id (you can find it at <code>https://codeclimate.com/repos/YOUR_REPO_ID/settings/test_reporter</code>).   If you don't want to use CodeClimate just delete <code>workflows/python-quality.yml</code>.</li> <li>Update the badges in <code>README.md</code>! (check shields.io for extra badges)</li> <li>Update the PyCharm Copyright profile in the IDE settings: Editor | Copyright | Copyright Profiles (if you want to use it)</li> <li>Setup local development:<ul> <li>Clone the repository</li> <li>Install uv</li> <li>Install dev dependencies with <code>make dev-dependencies</code></li> <li>(optional) It is strongly recommended to install pre-commit   and run <code>pre-commit install</code> so that formatting and linting are automatically executed during <code>git commit</code>.</li> </ul> </li> <li>Setup GitHub pages (this need local development setup):<ul> <li>Initialise documentation branch <code>uv run mike deploy dev latest --update-aliases --push</code></li> <li>Configure GitHub Pages to deploy from the <code>gh-pages</code> branch (at URL <code>https://github.com/GITHUB_NAME_OR_ORGANIZATION/GITHUB_REPOSITORY/settings/pages</code>)</li> <li>Add the <code>main</code> branch and the <code>v*.*.*</code> tag rules to the \"deployment branches and tags\" list in the <code>gh-pages</code> environment (at URL <code>https://github.com/GITHUB_NAME_OR_ORGANIZATION/GITHUB_REPOSITORY/settings/environments</code>)</li> </ul> </li> </ul> <p>IMPORTANT: The repository is configured to deploy on the test PyPI repository. It's strongly recommended to create the project in the test PyPI repository and test the deployment pipeline. When you're happy with the result, create the project on the official PyPI repository and remove the marked lines in <code>workflows/release.yml</code>.</p>"},{"location":"#package-release","title":"Package release","text":"<p>This setup uses uv-dynamic-versioning. This means it's not necessary to commit the version in the code but the CI pipeline will infer it from the git tag.</p> <p>To release a new version, just create a new release and tag in the GitHub repository, to:</p> <ul> <li>Build and deploy the python package to PyPI</li> <li>Build and deploy a new version of the documentation to GitHub pages</li> </ul> <p>IMPORTANT: The default configuration requires the release name and the tag to follow the convention <code>vX.X.X</code> (semantic versioning preceded by lowercase <code>v</code>). It will publish the correct version on Pypi, omitting the <code>v</code> (ie. <code>v1.0.0</code> will publish <code>1.0.0</code>).</p> <p>This format can be customized, refer to uv-dynamic-versioning docs.</p>"},{"location":"#commands-for-development","title":"Commands for development","text":"<p>All the common commands used during development can be run using make targets:</p> <ul> <li><code>make dev-dependencies</code>: Install dev requirements</li> <li><code>make fix</code>: Run code style and lint automatic fixes (where possible)</li> <li><code>make test</code>: Run test suite against system python version</li> <li><code>make check</code>: Run tests against all available python versions, code style and lint checks</li> <li><code>make type</code>, <code>make format</code>, <code>make lint</code>, <code>make bandit</code>: Run the relevant check</li> <li><code>make docs</code>: Render the mkdocs website locally</li> </ul>"},{"location":"API-Reference/","title":"Index","text":""},{"location":"API-Reference/#bootstrap_python_package.some_function","title":"<code>some_function()</code>","text":"<p>Some function docstring</p> RETURNS DESCRIPTION <code>str</code> <p>Some string</p> Source code in <code>bootstrap_python_package/__init__.py</code> <pre><code>def some_function() -&gt; str:\n    \"\"\"\n    Some function docstring\n\n    :return: Some string\n    :rtype: str\n    \"\"\"\n    return \"some_variable_to_test\"\n</code></pre>"},{"location":"API-Reference/version/","title":"Version","text":""},{"location":"adr/0001-record-architecture-decisions/","title":"Use Markdown Any Decision Records V3","text":""},{"location":"adr/0001-record-architecture-decisions/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record any decisions made in this project independent whether decisions concern the architecture (\"architectural decision record\"), the code, or other fields. Which format and structure should these records follow?</p>"},{"location":"adr/0001-record-architecture-decisions/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 3.0.0 \u2013 The Markdown Any Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Other templates listed at https://schubmat.github.io/DecisionCapture</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"adr/0001-record-architecture-decisions/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 3.0.0\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>MADR allows for structured capturing of any decision.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> </ul>"},{"location":"adr/adr-template/","title":"Adr template","text":""},{"location":"adr/adr-template/#source-httpsgithubcomadrmadrblob300templateadr-templatemd","title":"source: https://github.com/adr/madr/blob/3.0.0/template/adr-template.md","text":""},{"location":"adr/adr-template/#these-are-optional-elements-feel-free-to-remove-any-of-them","title":"These are optional elements. Feel free to remove any of them.","text":"<p>status: {proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0005} date: {YYYY-MM-DD when the decision was last updated} deciders: {list everyone involved in the decision} consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication} informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}</p>"},{"location":"adr/adr-template/#short-title-of-solved-problem-and-solution","title":"{short title of solved problem and solution}","text":""},{"location":"adr/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"adr/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"adr/adr-template/#consequences","title":"Consequences","text":"<ul> <li>Good, because {positive consequence, e.g., improvement of one or more desired qualities, \u2026}</li> <li>Bad, because {negative consequence, e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"adr/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"adr/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"adr/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"adr/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"adr/summary/","title":"ADR Summary","text":"ID Date Decision Status 1 03-02-2024 Use Markdown Any Decision Records V3 Accepted"}]}